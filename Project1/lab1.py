###########################
# DO NOT MODIFY THIS PART #
# BUT YOU SHOULD READ IT  #
###########################
class Node:
    """
    Huffman tree node definition.
    """
    def __init__(self, symbol=None, count=0, left=None, right=None):
        """
        initialization
          symbol   : symbol to be coded
          count    : count of symbol
          left     : left child node
          right    : right child node
        """
        self.__left = left
        self.__right = right
        self.__symbol = symbol
        self.__count = count
        self.__code_word = ''

    def setLeft(self, l):
        """
        sets the left child of current node
        """
        self.__left = l
    
    def setRight(self, r):
        """
        sets the right child of current node
        """
        self.__right = r
    
    def getLeft(self):
        """
        returns the left child of current node
        """
        return self.__left
    
    def getRight(self):
        """
        returns the right child of current node
        """
        return self.__right

    def setSymbol(self, symbol):
        """
        sets coding symbol of current node
        """
        self.__symbol = symbol

    def getSymbol(self):
        """
        returns coding symbol of current node
        """
        return self.__symbol

    def setCount(self, count):
        """
        sets count of the symbol
        """
        self.__count = count

    def getCount(self):
        """
        returns count of the symbol
        """
        return self.__count
    
    def setCodeWord(self, code_word):
        """
        sets code-word of the symbol
        """
        self.__code_word = code_word

    def getCodeWord(self):
        """
        returns code-word of the symbol
        """
        return self.__code_word

    def __lt__(self, node):
        return self.__count < node.getCount()

    def __repr__(self):
        return "symbol: {}, count: {}, code-word: {}".format(self.__symbol, self.__count, self.__code_word)

###########################
# DO NOT MODIFY THIS PART #
# BUT YOU SHOULD READ IT  #
###########################

#############################
# YOUR OWN HELPER FUNCTIONS #
#############################


#############################
# YOUR OWN HELPER FUNCTIONS #
#############################


##############################
# FINISH THE BELOW FUNCTIONS #
##############################
def buildDictionary(message):
    """
    In this function, you need to count the occurrence of every symbol in the message and 
    return it in a python dictionary. The keys of the dictionary are the symbols, the values of 
    the dictionary is their corresponding occurrences.  
    counts the occurrence of every symbol in the message and store it in a python dictionary
      parameter:
        message: input message string
      return:
        python dictionary, key = symbol, value = occurrence
    """
    pass

def buildHuffmanTree(word_dict):
    """
    uses the word dictionary to generate a huffman tree using a min heap
      parameter:
        word_dict  : word dictionary generated by buildDictionary()
      return:
        root node of the huffman tree
    """
    pass

def assignCodeWord(root, code_word=''):
    """
    recursively assigns code-word to the nodes in the huffman tree
      parameter:
        root       : root node of the huffman tree
        code_word  : code-word for the root node
      return:
        no return
    """
    pass

def huffmanEncode(message):
    """
    converts the input message into huffman code
      parameter:
        message    : input message string
      return:
        a tuple, the first element is the huffman code string for the input message,
        the second element is the huffman tree root node
    """
    pass

def huffmanDecode(message, huffman_tree):
    """
    decode the message
      parameter:
        message      : input huffman code string
        huffman_tree : huffman tree root node
      return:
        decoded message
    """
    pass

def main():
    """
    main process goes here
    """
    pass
##############################
# FINISH THE ABOVE FUNCTIONS #
##############################


###########################
# DO NOT MODIFY THIS PART #
###########################
if __name__ == "__main__":
    main()
###########################
# DO NOT MODIFY THIS PART #
###########################